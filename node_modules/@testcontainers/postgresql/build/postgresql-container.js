"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StartedPostgreSqlContainer = exports.PostgreSqlContainer = void 0;
const testcontainers_1 = require("testcontainers");
const POSTGRES_PORT = 5432;
class PostgreSqlContainer extends testcontainers_1.GenericContainer {
    database = "test";
    username = "test";
    password = "test";
    constructor(image = "postgres:13.3-alpine") {
        super(image);
        this.withExposedPorts(POSTGRES_PORT)
            .withWaitStrategy(testcontainers_1.Wait.forLogMessage(/.*database system is ready to accept connections.*/, 2))
            .withStartupTimeout(120000);
    }
    withDatabase(database) {
        this.database = database;
        return this;
    }
    withUsername(username) {
        this.username = username;
        return this;
    }
    withPassword(password) {
        this.password = password;
        return this;
    }
    async start() {
        this.withEnvironment({
            POSTGRES_DB: this.database,
            POSTGRES_USER: this.username,
            POSTGRES_PASSWORD: this.password,
        });
        return new StartedPostgreSqlContainer(await super.start(), this.database, this.username, this.password);
    }
}
exports.PostgreSqlContainer = PostgreSqlContainer;
class StartedPostgreSqlContainer extends testcontainers_1.AbstractStartedContainer {
    database;
    username;
    password;
    port;
    constructor(startedTestContainer, database, username, password) {
        super(startedTestContainer);
        this.database = database;
        this.username = username;
        this.password = password;
        this.port = startedTestContainer.getMappedPort(POSTGRES_PORT);
    }
    getPort() {
        return this.port;
    }
    getDatabase() {
        return this.database;
    }
    getUsername() {
        return this.username;
    }
    getPassword() {
        return this.password;
    }
    /**
     * @returns A connection URI in the form of `postgres[ql]://[username[:password]@][host[:port],]/database`
     */
    getConnectionUri() {
        const url = new URL("", "postgres://");
        url.hostname = this.getHost();
        url.port = this.getPort().toString();
        url.pathname = this.getDatabase();
        url.username = this.getUsername();
        url.password = this.getPassword();
        return url.toString();
    }
}
exports.StartedPostgreSqlContainer = StartedPostgreSqlContainer;
//# sourceMappingURL=postgresql-container.js.map